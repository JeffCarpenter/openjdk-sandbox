#
# Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#
#

MSG_Help_common=Usage: jpackage <mode> <options>\n\
\n\
where mode is one of: \n\
\  create-image\n\
\          Generates a platform-specific application image.\n\
\  create-installer <type>\n\
\          Generates a platform-specific installer for the application.\n\
\          Valid values for "type" are "msi", "exe", "rpm", "deb", "dmg",\n\
\                           "pkg", and "pkg-app-store".\n\
\          If "type" is omitted, all supported types of installable packages\n\
\          for current platform will be generated.\n\
\  create-jre-installer <type>\n\
\          Generates a platform-specific installer for Server JRE.\n\
\          Valid values for "type" are "msi", "exe", "rpm", "deb", "dmg", \n\
\                           and "pkg".\n\
\          If "type" is omitted, all supported types of installable packages\n\
\          for current platform will be generated.\n\
\          \n\
Sample usages:\n\
--------------\n\
jpackage create-image --input inputdir --output outputdir --name AppName --class package.ClassName --main-jar AppName.jar\n\
or\n\
jpackage create-image -o outputdir -n AppName -c package.ClassName -m moduleName -p modulePath\n\
Generates an application image.\n\
\n\
jpackage create-installer -i inputdir -o outputdir -n "App Name" -c package.ClassName\n\
Generates an application installer.\n\
\n\
jpackage create-jre-installer -n <jre_name> -o outputdir\n\
Generates a Server JRE installer.\n\
\n\
The following options are valid for all platforms:\n\
\  @<filename> \n\
\          read options and mode from file. \n\
\  --help -h \n\
\          Shows the usage text, followed by a list and description of each valid option for the current platform and the given mode.\n\
\          If no mode is given, shows the usage text, followed by a list and description of each valid option for the current platform.\n\
\          When this option is used, all other options are ignored.\n\
\  --output -o <output dir>\n\
\          Name of the directory where generated output file is placed.\n\
\  --input -i <input dir>\n\
\          Name of the input directory that contains the files to package.\n\
\  --files -f <input files>\n\
\          A {0} separated list of files in the input directory to be packaged.\n\
\          If omitted, all files in the input directory will be packaged.\n\
\  --name -n <application name>\n\
\          Name of the application.\n\
\  --main-jar -j <main jar name>\n\
\          The main JAR of the application. This JAR should have the main-class,\n\
\          and is relative to the assembled application directory.\n\
\  --class -c <class name>\n\
\          Qualified name of the application class to execute.\n\
\  --version -v <version string>\n\
\          Version of the application.\n\
\  --arguments -a <main class arguments>\n\
\          Command line arguments to pass to the main class if no arguments\n\
\          are specified by the launcher.\n\
\  --icon <icon file name>\n\
\          Icon of the application bundle.\n\
\  --singleton\n\
\          Prevents multiple instances of the application from launching\n\
\          (see SingleInstanceService API for more details).\n\
\  --identifier <id string>\n\
\          Machine readable identifier of the application. The format\n\
\          must be a DNS name in reverse order, such as com.example.myapplication.\n\
\  --verbose\n\
\          Enables verbose output.\n\
\  --strip-native-commands\n\
\          Removes native executables from the custom run-time images.\n\
\  --jvm-args <java vm arguments>\n\
\          JVM flags and options to pass to the application.\n\
\  --file-associations <file path>\n\
\          Properties file that contains list of key=value parameters that\n\
\          describe a file association. "extension", "mime-type", "icon",\n\
\          "description" can be used as keys for the association.\n\
\  --secondary-launcher <file path>\n\
\          Properties file that contains a collection of options for a secondary launcher.\n\
\  --build-root <file path>\n\
\          Directory in which to use and place temporary files.\n\
\  --runtime-image <file path>\n\
\          Location of the predefined runtime image that is used to build\n\
\          an application image and installable package.\n\
\  --app-image <file path>\n\
\          Location of the predefined application image that is used to build\n\
\          an installable package.\n\
\  --install-dir <file path>\n\
\          Installation directory of the application. Ignored on Windows, use\n\
\          --win-dir-chooser to provide an ability to choose an installation directory.\n\
\  --license-file <file name>\n\
\          The license file, relative to the input directory.\n\
\  --copyright <copyright string>\n\
\          Copyright for the application.\n\
\  --description <description string>\n\
\          Description of the application.\n\
\  --category <category string>\n\
\          Category or group of the application.\n\
\  --vendor <vendor string>\n\
\          Vendor of the application.\n\
\  --force -- Allow the deletion of any existing output root directory when creating an Application image.\n\
\n\
Modular options:\n\
\  --module -m <module name>\n\
\          Main module of the application. This module must have the main-class,\n\
\          and be on the module path.\n\
\  --module-path -p <module path>\n\
\          When packaging the Java Runtime, this is the path JLink looks in for modules.\n\
\  --add-modules <module list>\n\
\          A {0} separated list of modules to add to JImage creation,\n\
\          including possible services.\n\
\  --limit-modules <module list>\n\
\          A {0} separated list of Modules to limit JImage creation to.\n\

MSG_Help_mac=\nThe following options are valid for Mac OS X platforms:\n\
\  --mac-sign\n\
\          Request that the bundle be signed.\n\
\  --mac-bundle-name <name string>\n\
\          Name of the application as it appears in the Menu Bar. This can be\n\
\          different from the application name. This name must be less than 16\n\
\          characters long and be suitable for displaying in the menu bar and\n\
\          the application Info window. Defaults to the application name.\n\
\  --mac-bundle-identifier <ID string>\n\
\          An identifier that uniquely identifies the application for MacOSX\n\
\          (and on the Mac App Store).  May only use alphanumeric (A-Z,a-z,0-9),\n\
\          hyphen (-), and period (.) characters.\n\
\  --mac-app-store-category <category string>\n\
\          Mac App Store Categories. Note that the key is the string shown to\n\
\          the user and the value is the ID of the category.\n\
\  --mac-app-store-entitlements <file path>\n\
\          File location of a custom mac app store entitlements file.\n\
\  --mac-bundle-signing-prefix <prefix string>\n\
\          When signing the application bundle, this value is prefixed to all\n\
\          components that need to be signed that don't have an existing bundle identifier.\n\
\  --mac-signing-key-user-name <user name>\n\
\          User name portion of the typical "Mac Developer ID Application: <user name>" signing key.\n\
\  --mac-signing-keychain <file path>\n\
\          Location of the keychain to use. If not specified, the standard keychains are used.\n\

MSG_Help_linux=\nThe following options are valid for Linux platforms:\n\
\  --linux-bundle-name <bundle name>\n\
\          Name for Linux bundle. Defaults to the application name.\n\
\  --linux-package-deps\n\
\          Required packages or capabilities for the application.\n\
\  --linux-rpm-license-type <type string>\n\
\          Type of the license ("License: <value>" of the RPM .spec).\n\
\  --linux-deb-maintainer <email address>\n\
\          Maintainer for .deb bundle.\n\

MSG_Help_win=\nThe following options are valid for Windows platforms:\n\
\  --win-menu\n\
\          Adds the application to the system menu.\n\
\  --win-menu-group <menu group name>\n\
\          Start Menu group this application is placed in.\n\
\  --win-per-user-install\n\
\          Request to perform an install on a per-user basis.\n\
\  --win-dir-chooser\n\
\          Adds a dialog to enable the user to choose a directory in which\n\
\          the product is installed.\n\
\  --win-registry-name <registry name>\n\
\          Name of the application for registry references. Default is\n\
\          the Application Name with only alphanumerics, dots, and dashes (no whitespace).\n\
\  --win-upgrade-uuid <id string>\n\
\          UUID associated with upgrades for this package.\n\
\  --win-shortcut\n\
\          Creates a desktop shortcut for the application.\n\
\  --win-console\n\
\          Creates a console launcher for the application. Should be specified for\n\
\          application which requires console interactions.\n\

MSG_Help_no_args=Usage: jpackage <mode> <options>\n\
\Use --help for a list of possible options\
